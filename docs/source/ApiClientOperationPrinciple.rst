Работа с документами
====================

.. contents:: :local:

Работать с документами можно только внутри :doc:`сообщения <entities/message>`.

.. _doc_send:

Отправка сообщения
------------------

Подготовка и отправка исходящих сообщений осуществляется с помощью метода :doc:`http/PostMessage`.
В метод нужно передать структуру :doc:`proto/MessageToPost`: она должна содержать идентификаторы ящиков участников документооборота, набор отправляемых документов и настройки.
В качестве ящика отправителя пользователь может указать только ящик, к которому он имеет доступ с текущим авторизационным токеном.

После вызова метода ``PostMessage`` в ящике отправителя формируется:

- цепочка документооборота и информация о связанных с ней документах,
- событие о появлении сообщения.

В ящике получателя эта информация появится с некоторой задержкой: это связано с асинхронной передачей информации из ящика отправителя в ящик получателя.
То есть успешный вызов метода ``PostMessage`` гарантирует лишь появление исходящего сообщения в ящике отправителя; в ящике получателя сообщение и соответствующее событие могут появиться с задержкой.

Не отправляйте формализованные документы размером более 3 Мб. Это может увеличить время обработки документа и завершиться ошибкой.

.. _doc_draft:

Создание черновика
~~~~~~~~~~~~~~~~~~

Метод :doc:`http/PostMessage` можно использовать для создания :doc:`черновиков <entities/draft>` — сообщений, содержащих документы без подписей к ним.

Чтобы создать черновик, укажите флаг ``IsDraft`` в структуре :doc:`proto/MessageToPost` при создании сообщения. Такое сообщение будет загружено на сервер, но задание на отправку сообщения получателю формироваться не будет.

Для формирования подписей к документам и отправки сообщения на основе черновика используйте метод :doc:`http/SendDraft`.

Дополнение сообщения
--------------------

Сформированные цепочки документооборота можно дополнять служебными документами с помощью метода :doc:`http/PostMessagePatch`, в который передается структура :doc:`proto/MessagePatchToPost`.

Эта структура содержит идентификатор цепочки документооборота, которую нужно дополнить новым документом, и идентификатор ящика, с которым эта цепочка связана. Если в документооборот вовлечено две организации, то в ящике второй стороны цепочка документооборота также будет обновлена; обновление производится асинхронно.

Клиент должен дополнять цепочку документооборота через «свой» ящик, то есть через тот ящик, к которому у него есть доступ.

Если загружаемый документ имеет большой размер (больше 100Кб), то для загрузки такого документа в Диадок используйте «полку документов». В этом случае документ сначала загружается на сервер Диадока с помощью серии вызовов :doc:`http/ShelfUpload`, а затем в структурах :doc:`proto/MessageToPost` и :doc:`proto/MessagePatchToPost` можно ссылаться на уже загруженный документ. Такой подход позволяет повысить скорость и надежность загрузки.

Получение документа
-------------------

Для получения текущего состояния конкретной цепочки документооборота можно использовать метод :doc:`http/GetMessage`, который возвращает все документы, составляющие данную цепочку, в структуре :doc:`proto/Message`.

Структура :doc:`proto/Message` может содержать документы, сформированные в разное время разными организациями: например, в одну структуру могут попасть исходящий документ одной организации и подпись к этому документу, поставленная представителем другой организации.

Чтобы получить содержимое конкретного документа в цепочке документооборота, нужно взять идентификаторы из полей boxId и messageId структуры :doc:`proto/Message` и идентификатор документа entityId из соответствующей структуры :doc:`Entity <proto/Entity message>`, а затем воспользоваться методом :doc:`http/GetEntityContent`.

Таким образом, каждый ящик в Диадоке может изменяться лишь одним из двух способов:

- в ящике формируется новая цепочка документооборота;
- дополняется уже существующая в ящике цепочка документооборота.

То есть вся уже существующая в ящике информация не может быть изменена, она может быть лишь дополнена. Соответственно, все модификации ящика естественным образом упорядочиваются хронологически, и можно говорить о «событиях», связанных с конкретным ящиком:

- событие о формировании новой цепочки документооборота;
- событие о добавлении документа к уже имеющейся цепочки документооборота.

Чтобы получить информацию о новых событиях, используйте метод :doc:`http/GetNewEvents`. Этот метод предоставляет доступ к упорядоченному хронологически потоку всех событий (:doc:`proto/BoxEvent`), происходящих в заданном ящике.