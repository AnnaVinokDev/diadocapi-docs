Порядок работы с документами
============================

Отправка документа
------------------

Подготовка и отправка исходящих сообщений осуществляется при помощи метода :doc:`http/PostMessage`, которому на вход передается структура :doc:`proto/MessageToPost`. Эта структура содержит идентификаторы ящиков участников документооборота (ящики отправителя и получателя сообщения) и собственно набор отправляемых документов.

В качестве ящика отправителя клиент может указывать только «свой» ящик, то есть ящик, к которому он может получить доступ при помощи имеющегося у него авторизационного токена. 

В результате вызова метода :doc:`http/PostMessage` формируется новая цепочка документооборота, связывающая ящики отправителя и получателя. 

В ящике отправителя информация о сформированной цепочке появляется в момент вызова метода :doc:`http/PostMessage` (соответственно, формируется событие о появлении документа, информацию о событиях см. ниже).

Информация о новой цепочке документооборота и связанных с ней документах в ящике получателя, вообще говоря, появится с некоторой задержкой, связанной с асинхронной передачей информации из ящика отправителя в ящик получателя.

То есть успешный вызов метода PostMessage гарантирует лишь появление исходящего сообщения в ящике отправителя; в ящике получателя сообщение и
соответствующее событие могут появиться с некоторой задержкой.

Метод :doc:`http/PostMessage` можно также использовать для формирования на сервере сообщений, содержащих отправляемые документы без подписей к ним (см. флаг IsDraft структуры :doc:`proto/MessageToPost`; если он выставлен в true, то сообщение будет загружено на сервер, но задание на доставку сообщения его получателю формироваться не будет). В этом случае для формирования подписей к документам и отправки сообщения следует использовать метод :doc:`http/SendDraft`.

Не отправляйте формализованные документы размером более 3 Мб. Это может увеличить время обработки документа и завершиться ошибкой.

Дополнение документа
--------------------

Уже сформированные цепочки документооборота можно дополнять служебными документами при помощи метода :doc:`http/PostMessagePatch`, которому на вход передается структура :doc:`proto/MessagePatchToPost`. 

Эта структура содержит идентификатор цепочки документооборота, которую следует дополнить новым документом, и идентификатор ящика, с которым эта цепочка связана (если в документооборот вовлечено две организации, то в ящике второй стороны цепочка документооборота также будет обновлена; обновление производится асинхронно).

Клиент должен дополнять цепочку документооборота через «свой» ящик, то есть через тот ящик, к которому у него есть доступ.

Если загружаемый документ имеет большой размер (больше 100Кб), то для загрузки такого документа в Диадок следует пользоваться сервисом «полки документов».

В этом случае документ сначала загружается на сервер Диадока с помощью серии вызовов :doc:`http/ShelfUpload`, а затем в структурах :doc:`proto/MessageToPost` и :doc:`proto/MessagePatchToPost` можно ссылаться на уже загруженный документ. Такой подход позволяет повысить скорость и надежность загрузки.

Получение документа
-------------------

Для получения текущего состояния конкретной цепочки документооборота можно использовать метод :doc:`http/GetMessage`, который возвращает все документы, составляющие данную цепочку, агрегированные в одну структуру :doc:`proto/Message`.

Отметим, что структура :doc:`proto/Message` может содержать документы, сформированные в разное время разными организациями (например, в одну такую структуру могут попасть исходящий документ одной организации и подпись к этому документу, поставленная представителем другой организации).

Для того, чтобы получить содержимое конкретного документа в цепочке документооборота, следует взять идентификаторы из полей boxId и messageId структуры :doc:`proto/Message` и идентификатор документа entityId из соответствующей структуры :doc:`Entity <proto/Entity message>`, а затем воспользоваться методом :doc:`http/GetEntityContent`.

Таким образом, каждый ящик в Диадоке может изменяться лишь одним из двух способов:

-  в ящике формируется новая цепочка документооборота;

-  дополняется уже существующая в ящике цепочка документооборота.

То есть вся уже существующая в ящике информация не может быть изменена, она может быть лишь дополнена. Соответственно, все модификации ящика естественным образом упорядочиваются хронологически, и можно говорить о «событиях», связанных с конкретным ящиком:

-  событие о формировании новой цепочки документооборота;

-  событие о добавлении документа к уже имеющейся цепочки документооборота.

Чтобы получить информацию о новых событиях следует использовать метод :doc:`http/GetNewEvents`. Этот метод предоставляет доступ к упорядоченному хронологически потоку всех Событий (:doc:`proto/BoxEvent`), «происходящих» в заданном ящике.
