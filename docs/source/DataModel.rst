Как работает Диадок
===================

.. contents:: :local:
	:depth: 3

Диадок обеспечивает июридически-значимый документооборот между организациями. Поэтому основные задачи Диадока — это:

	- пересылка документов между организациями,
	- формирование и хранение **цепочек документооборота** — последовательности событий, происходящих с документом, например: формирование документа, подпись отправителем, передача на подпись получателю и т.д.


Пересылка документов
--------------------


Пересылка документов между организациями
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Диадок позволяет пересылать документы между организациями. Организацией может быть юридическое лицо или индивидуальный предприниматель.

За каждой организацией закреплен **ящик**, и документы фактически пересылаются между этими ящиками.

Пересылка документов происходит следующим образом:

	1. Когда пользователь хочет начать документооборот со своим контрагентом, он создает **сообщение** в своем **ящике** — т.е. в **ящике отправителя**. Сообщение включает в себя **документ** и **подпись** к нему.
	2. Диадок формирует цепочку документооборота этого сообщения в ящике отправителя.
	3. Одновременно Диадок формирует цепочку документооборота этого сообщения в ящике контрагента — т.е. в **ящике получателя**. Так происходит «доставка» документа контрагенту.

Этот процесс аналогичен доставке писем на электронную почту, но в реальности документы никуда не пересылаются. Вместо этого в ящиках отправителя и получателя формируются записи, позволяющие получить доступ к документу.


Пересылка документов внутри организации
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Диадок позволяет обмениваться документами не только между организациями, но и внутри одной организации — между отделами, сотрудниками и т.п.

За каждой организацией закреплен только один ящик. Поэтому для обеспечения документооборота внутри организации используются **подразделения**. Если нужно переслать документы между отделами и сотрудниками одной организации, то такие документы пересылаются не из одного ящика в другой, а из одного подразделения организации в другое.


Доступ к ящикам
~~~~~~~~~~~~~~~

Чтобы отправить документ из ящика или просмотреть полученный документ в ящике, пользователь должен иметь к нему доступ. При этом к одному ящику могут иметь доступ несколько пользователей, и один пользователь может иметь доступ к нескольким ящикам.

Чтобы получить доступ к ящику, пользователь должен :doc:`авторизоваться <Authorization>` в системе.


Формирование и хранение цепочки документооборота
------------------------------------------------


Хранение сообщений в ящике
~~~~~~~~~~~~~~~~~~~~~~~~~~

Ящик представляет собой логическое хранилище сообщений — отправленных из этого ящика и полученных в этот ящик. Содержимое ящика можно представить как единый список всех входящих и исходящих сообщений.

Чтобы получить доступ к конкретному сообщению в ящике, нужны два параметра:

	- идентификатор ящика,
	- идентификатор сообщения в ящике.


Хранение документов в сообщении
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

В каждом сообщении сгруппированы документы, относящиеся к одной бизнес-транзакции — т.е. входящих в одну цепочку документооборота. Например, в одном сообщении может содержаться пакет документов, закрывающий сделку: счет-фактуру и акт о выполнении работ (оказании услуг).

Помимо основных документов (счет-фактура, УПД, договор и т.п.), сообщение включает в себя подписи и **служебные документы**, например: извещение о получении, уведомления и т.п.
После отправки сообщения новые документы в него добавить нельзя, однако набор служебных документов, входящих в сообщение, может меняться со временем. Например, порядок обмена счетами-фактурами подразумевает, что покупатель в ответ на полученный счет-фактуру должен отправить продавцу документ, подтверждающий получение счета-фактуры. В этом случае счет-фактура и этот служебный документ будут храниться в одном сообщении.


Формирование цепочки документооборота
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

По аналогии с электронной почтой, сообщение в Диадоке похоже не на отдельное письмо, а на цепочку писем, возникающую в ходе переписки. Такая цепочка в Диадоке формируется с помощью **дополнений к сообщению** (**патчей**). Дополнения к сообщению описывают изменения, произошедшие с сообщением, и могут содержать добавившиеся документы с электронной подписью.

Таким образом сообщение представляет собой упорядоченный набор связанных дополнений (патчей). Дополнение, с которого «начинается» сообщение, называется заглавным.

Дополнение к сообщению является неделимым: либо оно доставляется целиком — то есть доставляются все документы и подписи из этого дополнения, либо не доставляется целиком в случае возникновения ошибок — то есть не доставляется ни один документ или подпись из такого дополнения.


Представление сущностей в сообщении
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Отдельные документы, электронные подписи к ним, комментарии к документам и другие служебные данные представляются в Диадоке понятием **сущность** (:doc:`Entity <proto/Entity message>`). Каждая сущность имеет идентификатор, тип и бинарное представление, которое интерпретируется в зависимости от типа сущности. Например, бинарным представлением счета-фактуры является массив байтов XML-файла в формате и кодировке, определенных ФНС. А бинарным представлением электронной подписи является массив байтов отсоединенной подписи в соответствии со стандартом CMS (:rfc:`5652`) в DER-кодировке.

Чтобы однозначно идентифицировать сущность, нужны три параметра:

	- идентификатор ящика,
	- идентификатор сообщения в ящике,
	- идентификатор сущности внутри сообщения.


Связи между сущностями
~~~~~~~~~~~~~~~~~~~~~~

Между сущностями в Диадоке могут устанавливаться связи двух типов:

1. Ссылки между родительской и дочерней сущностью. 

 Эта связь задается атрибутом ``ParentEntityId`` и устанавливает ссылки между сущностями внутри одного сообщения (при этом они могут находиться в разных дополнениях).

 |image0|

 На рисунке сообщение *A* содержит две сущности — *U* и *V*. Сущность *U* является родительской по отношению к сущности *V*, потому что ее поле ``ParentEntityId`` содержит значение *U*.

 Таким способом связываются, например, документ и электронная подпись под ним (*U* – документ, *V* – подпись) или счет-фактура и подтверждение о его получении (*U* – счет-фактура, *V* – подтверждение).

2. Ссылки между сущностями из разных сообщений.

 Эта связь задается атрибутом ``InitialDocumentId`` и устанавливает ссылки между документами, находящимися в разных сообщениях.

 |image1|

 На рисунке сущность *X* в сообщении *B* связана с сущностью *U* в сообщении *A* с помощью поля ``InitialDocumentId``. В качестве значения этого поля используется пара идентификаторов – сообщения и сущности (*A:U*).

 Так связываются, например, корректирующий счет-фактуры и исходный счет-фактура или дополнительное соглашение с основным договором.

 .. |image0| image:: _static/img/diadoc-api-data-model-parent-entity.png
 .. |image1| image:: _static/img/diadoc-api-data-model-initial-document.png