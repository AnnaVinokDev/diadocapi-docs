Как устроен Диадок
==================

Диадок обеспечивает июридически-значимый документооборот между организациями. Поэтому основные задачи Диадока — это:

	- пересылка документов между организациями,
	- формирование и хранение **цепочек документооборота** — последовательности событий, происходящих с документом, например: формирование документа, подпись отправителем, передача на подпись получателю и т.д.

Пересылка документов
--------------------

Документы в Диадоке пересылаются между **ящиками**. Каждый ящик принадлежит одной конкретной **организации**. Организацией могут быть юридическое лицо или индивидуальный предприниматель.

Пересылка документов происходит следующим образом:

	1. Когда пользователь хочет начать документооборот со своим контрагентом, он создает **сообщение** в своем **ящике** — т.е. в **ящике отправителя**. Сообщение включает в себя **документ** и **подпись** к нему.
	2. Диадок формирует цепочку документооборота этого сообщения в ящике отправителя.
	3. Одновременно Диадок формирует цепочку документооборота этого сообщения в ящике контрагента — т.е. в **ящике получателя**. Так происходит «доставка» документа контрагенту.

Этот процесс аналогичен доставке писем на электронную почту, но в реальности документы никуда не пересылаются. Вместо этого в ящиках отправителя и получателя формируются записи, позволяющие получить доступ к документу.

За счет этого, например, обмен бухгалтерскими документами и обмен договорами с одной компанией могут замыкаться на различные отделы и различных людей внутри этой компании, так что соответствующие бизнес-процессы будут автоматизироваться независимо.

Доступ к ящикам
---------------

Разграничение доступа пользователя происходит на уровне ящиков: к одному ящику могут получить доступ несколько пользователей, и один пользователь может получить доступ к нескольким ящикам.

Доступ к ящику подразумевает возможность просматривать хранящиеся в нем документы и отправлять из него документы контрагентам.

Чтобы получить доступ к ящику, пользователь :doc:`авторизуется <Authorization>` в системе.


Хранение сообщений в ящике
--------------------------

Ящик представляет собой логическое хранилище сообщений: отправленных из этого ящика и полученных в этот ящика. То есть содержимое ящика можно представить единым списком всех входящих и исходящих сообщений.

Чтобы получить доступ к конкретному сообщению в ящике, нужны два параметра:

	- идентификатор ящика,
	- идентификатор сообщения в ящике.

Хранение документов в сообщении
-------------------------------

Сообщение служит для группировки документов, относящихся к одной бизнес-транзакции — т.е. входящих в одну цепочку документооборота. Например, в одном сообщении может содержаться пакет документов, закрывающий сделку: счет-фактуру и акт о выполнении работ (оказании услуг).

Набор служебных документов, входящих в сообщение, может меняться со временем. После отправки новые документы добавить в сообщение нельзя.

Например, порядок обмена счетами-фактурами подразумевает, что покупатель в ответ на полученный счет-фактуру должен отправить продавцу документ, подтверждающий получение счета-фактуры. В этом случае счет-фактура и этот служебный документ окажутся в одном сообщении.

По аналогии с электронной почтой, сообщение в Диадоке похоже не на отдельное e-mail сообщение, а на цепочку сообщений, возникающую в ходе переписки.

Чтобы обеспечить такой механизм эволюции сообщений во времени, вводится понятие дополнения к сообщению (патч)(:doc:`proto/MessagePatch`).

Дополнения к сообщению описывают изменения, произошедшие с сообщением и могут содержать добавившиеся документы с ЭП. 

Сообщение, таким образом, можно воспринимать как упорядоченный набор связанных дополнений (патчей).

Причем дополнение, с которого «начинается» сообщение, называется заглавным.

Дополнение к сообщению с точки зрения Диадока является неделимым — оно доставляется либо все целиком (то есть доставляются ВСЕ документы и ЭП из этого дополнения), либо, при возникновении каких-либо ошибок, не доставляется целиком (то есть не доставляются ни документы, ни ЭП из такого дополнения).

Сущности
--------

Отдельные документы, электронные подписи к ним, комментарии к документам и другие служебные данные представляются в Диадоке понятием Сущность (:doc:`Entity <proto/Entity message>`).

Каждая сущность имеет идентификатор, тип и массив байтов, содержащий бинарное представление сущности (интерпретация этого представления зависит от типа сущности). 

Например, бинарным представлением сущности, представляющей счет-фактуру, будет являться массив байтов XML-файла в формате и кодировке, определенных ФНС. А бинарным представлением сущности, представляющей ЭП, являться массив байтов отсоединенной подписи в соответствии со стандартом CMS (:rfc:`5652`) в DER-кодировке. 

Для однозначной идентификации сущностей нужно уже три идентификатора:
-  идентификатор ящика,
-  
-  идентификатор сообщения внутри ящика,
-  
-  идентификатор сущности внутри сообщения.

Между сущностями в Диадоке могут устанавливаться связи двух типов. Первый тип связей задается атрибутом *ParentEntityId* и служит для связывания сущностей внутри одного сообщения (при этом они могут находиться в разных дополнениях):

|image0|

На рисунке сообщение A содержит две сущности – U и V. Сущность V является «дочерней» по отношению к сущности U, поскольку у нее поле *ParentEntityId* содержит значение U.

Таким способом связываются, например, документ и ЭП под ним (U – документ, V – подпись), или счет-фактура и подтверждение о его получении (U – счет-фактура, V – подтверждение).

Другой тип связей задается при помощи атрибута *InitialDocumentId* и служит для установки ссылок между документами, находящимися в разных сообщениях:

|image1|

Здесь сущность X в сообщении B связана с сущностью U в сообщении A при помощи поля *InitialDocumentId*. В качестве значения этого поля используется пара идентификаторов – сообщения и сущности (A:U). 

Этот механизм может использоваться, например, для связывания корректирующего счета-фактуры с исходным, или для связывания дополнительного соглашения с основным договором.

.. |image0| image:: _static/img/diadoc-api-data-model-parent-entity.png
.. |image1| image:: _static/img/diadoc-api-data-model-initial-document.png
